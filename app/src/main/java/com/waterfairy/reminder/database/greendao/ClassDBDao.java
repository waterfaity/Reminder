package com.waterfairy.reminder.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.waterfairy.reminder.database.ClassDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLASS_DB".
*/
public class ClassDBDao extends AbstractDao<ClassDB, Long> {

    public static final String TABLENAME = "CLASS_DB";

    /**
     * Properties of entity ClassDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Week = new Property(2, int.class, "week", false, "WEEK");
        public final static Property Time = new Property(3, int.class, "time", false, "TIME");
        public final static Property Level = new Property(4, int.class, "level", false, "LEVEL");
        public final static Property ClassName = new Property(5, String.class, "className", false, "CLASS_NAME");
        public final static Property Tag = new Property(6, String.class, "tag", false, "TAG");
        public final static Property ChangTime = new Property(7, long.class, "changTime", false, "CHANG_TIME");
        public final static Property Open = new Property(8, boolean.class, "open", false, "OPEN");
    }


    public ClassDBDao(DaoConfig config) {
        super(config);
    }
    
    public ClassDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLASS_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"WEEK\" INTEGER NOT NULL ," + // 2: week
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"LEVEL\" INTEGER NOT NULL ," + // 4: level
                "\"CLASS_NAME\" TEXT," + // 5: className
                "\"TAG\" TEXT," + // 6: tag
                "\"CHANG_TIME\" INTEGER NOT NULL ," + // 7: changTime
                "\"OPEN\" INTEGER NOT NULL );"); // 8: open
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLASS_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClassDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
        stmt.bindLong(3, entity.getWeek());
        stmt.bindLong(4, entity.getTime());
        stmt.bindLong(5, entity.getLevel());
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(6, className);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
        stmt.bindLong(8, entity.getChangTime());
        stmt.bindLong(9, entity.getOpen() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClassDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
        stmt.bindLong(3, entity.getWeek());
        stmt.bindLong(4, entity.getTime());
        stmt.bindLong(5, entity.getLevel());
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(6, className);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
        stmt.bindLong(8, entity.getChangTime());
        stmt.bindLong(9, entity.getOpen() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClassDB readEntity(Cursor cursor, int offset) {
        ClassDB entity = new ClassDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.getInt(offset + 2), // week
            cursor.getInt(offset + 3), // time
            cursor.getInt(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // className
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tag
            cursor.getLong(offset + 7), // changTime
            cursor.getShort(offset + 8) != 0 // open
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClassDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeek(cursor.getInt(offset + 2));
        entity.setTime(cursor.getInt(offset + 3));
        entity.setLevel(cursor.getInt(offset + 4));
        entity.setClassName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChangTime(cursor.getLong(offset + 7));
        entity.setOpen(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClassDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClassDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClassDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
