package com.waterfairy.reminder.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.waterfairy.reminder.database.ClockDB;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CLOCK_DB".
 */
public class ClockDBDao extends AbstractDao<ClockDB, Long> {

    public static final String TABLENAME = "CLOCK_DB";

    /**
     * Properties of entity ClockDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Open = new Property(1, boolean.class, "open", false, "OPEN");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property Hour = new Property(3, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(4, int.class, "minute", false, "MINUTE");
        public final static Property Week = new Property(5, String.class, "week", false, "WEEK");
        public final static Property OneTime = new Property(6, boolean.class, "oneTime", false, "ONE_TIME");
        public final static Property CreateTime = new Property(7, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(8, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property FirstTime = new Property(9, long.class, "firstTime", false, "FIRST_TIME");
    }


    public ClockDBDao(DaoConfig config) {
        super(config);
    }

    public ClockDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOCK_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OPEN\" INTEGER NOT NULL ," + // 1: open
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"HOUR\" INTEGER NOT NULL ," + // 3: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 4: minute
                "\"WEEK\" TEXT," + // 5: week
                "\"ONE_TIME\" INTEGER NOT NULL ," + // 6: oneTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 8: updateTime
                "\"FIRST_TIME\" INTEGER NOT NULL );"); // 9: firstTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOCK_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClockDB entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOpen() ? 1L : 0L);

        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
        stmt.bindLong(4, entity.getHour());
        stmt.bindLong(5, entity.getMinute());

        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(6, week);
        }
        stmt.bindLong(7, entity.getOneTime() ? 1L : 0L);
        stmt.bindLong(8, entity.getCreateTime());
        stmt.bindLong(9, entity.getUpdateTime());
        stmt.bindLong(10, entity.getFirstTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClockDB entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOpen() ? 1L : 0L);

        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
        stmt.bindLong(4, entity.getHour());
        stmt.bindLong(5, entity.getMinute());

        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(6, week);
        }
        stmt.bindLong(7, entity.getOneTime() ? 1L : 0L);
        stmt.bindLong(8, entity.getCreateTime());
        stmt.bindLong(9, entity.getUpdateTime());
        stmt.bindLong(10, entity.getFirstTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ClockDB readEntity(Cursor cursor, int offset) {
        ClockDB entity = new ClockDB( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getShort(offset + 1) != 0, // open
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
                cursor.getInt(offset + 3), // hour
                cursor.getInt(offset + 4), // minute
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // week
                cursor.getShort(offset + 6) != 0, // oneTime
                cursor.getLong(offset + 7), // createTime
                cursor.getLong(offset + 8), // updateTime
                cursor.getLong(offset + 9) // firstTime
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ClockDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpen(cursor.getShort(offset + 1) != 0);
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHour(cursor.getInt(offset + 3));
        entity.setMinute(cursor.getInt(offset + 4));
        entity.setWeek(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOneTime(cursor.getShort(offset + 6) != 0);
        entity.setCreateTime(cursor.getLong(offset + 7));
        entity.setUpdateTime(cursor.getLong(offset + 8));
        entity.setFirstTime(cursor.getLong(offset + 9));
    }

    @Override
    protected final Long updateKeyAfterInsert(ClockDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(ClockDB entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClockDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
